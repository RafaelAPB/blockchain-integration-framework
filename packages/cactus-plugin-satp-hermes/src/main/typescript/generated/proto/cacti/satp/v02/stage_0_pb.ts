// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file cacti/satp/v02/stage_0.proto (package cacti.satp.v02, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { MessageType, TransferClaims } from "./common/common_messages_pb.js";

/**
 * @generated from message cacti.satp.v02.TransferProposalClaimsRequest
 */
export class TransferProposalClaimsRequest extends Message<TransferProposalClaimsRequest> {
  /**
   * @generated from field: cacti.satp.v02.common.MessageType message_type = 1;
   */
  messageType = MessageType.UNSPECIFIED;

  /**
   * @generated from field: cacti.satp.v02.common.TransferClaims transfer_claims = 2;
   */
  transferClaims?: TransferClaims;

  constructor(data?: PartialMessage<TransferProposalClaimsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.TransferProposalClaimsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message_type", kind: "enum", T: proto3.getEnumType(MessageType) },
    { no: 2, name: "transfer_claims", kind: "message", T: TransferClaims },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferProposalClaimsRequest {
    return new TransferProposalClaimsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferProposalClaimsRequest {
    return new TransferProposalClaimsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferProposalClaimsRequest {
    return new TransferProposalClaimsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TransferProposalClaimsRequest | PlainMessage<TransferProposalClaimsRequest> | undefined, b: TransferProposalClaimsRequest | PlainMessage<TransferProposalClaimsRequest> | undefined): boolean {
    return proto3.util.equals(TransferProposalClaimsRequest, a, b);
  }
}

/**
 * TODO
 *
 * @generated from message cacti.satp.v02.TransferProposalClaimsResponse
 */
export class TransferProposalClaimsResponse extends Message<TransferProposalClaimsResponse> {
  /**
   * @generated from field: cacti.satp.v02.common.MessageType message_type = 1;
   */
  messageType = MessageType.UNSPECIFIED;

  constructor(data?: PartialMessage<TransferProposalClaimsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.TransferProposalClaimsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message_type", kind: "enum", T: proto3.getEnumType(MessageType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferProposalClaimsResponse {
    return new TransferProposalClaimsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferProposalClaimsResponse {
    return new TransferProposalClaimsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferProposalClaimsResponse {
    return new TransferProposalClaimsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TransferProposalClaimsResponse | PlainMessage<TransferProposalClaimsResponse> | undefined, b: TransferProposalClaimsResponse | PlainMessage<TransferProposalClaimsResponse> | undefined): boolean {
    return proto3.util.equals(TransferProposalClaimsResponse, a, b);
  }
}

