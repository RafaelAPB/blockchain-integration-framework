// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file cacti/satp/v02/stage_3.proto (package cacti.satp.v02, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SATPMessage } from "./common/common_messages_pb.js";

/**
 * @generated from message cacti.satp.v02.MintAssertionClaims
 */
export class MintAssertionClaims extends Message<MintAssertionClaims> {
  constructor(data?: PartialMessage<MintAssertionClaims>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.MintAssertionClaims";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MintAssertionClaims {
    return new MintAssertionClaims().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MintAssertionClaims {
    return new MintAssertionClaims().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MintAssertionClaims {
    return new MintAssertionClaims().fromJsonString(jsonString, options);
  }

  static equals(a: MintAssertionClaims | PlainMessage<MintAssertionClaims> | undefined, b: MintAssertionClaims | PlainMessage<MintAssertionClaims> | undefined): boolean {
    return proto3.util.equals(MintAssertionClaims, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.BurnAssertionClaim
 */
export class BurnAssertionClaim extends Message<BurnAssertionClaim> {
  constructor(data?: PartialMessage<BurnAssertionClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.BurnAssertionClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BurnAssertionClaim {
    return new BurnAssertionClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BurnAssertionClaim {
    return new BurnAssertionClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BurnAssertionClaim {
    return new BurnAssertionClaim().fromJsonString(jsonString, options);
  }

  static equals(a: BurnAssertionClaim | PlainMessage<BurnAssertionClaim> | undefined, b: BurnAssertionClaim | PlainMessage<BurnAssertionClaim> | undefined): boolean {
    return proto3.util.equals(BurnAssertionClaim, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.BurnAssertionClaimFormat
 */
export class BurnAssertionClaimFormat extends Message<BurnAssertionClaimFormat> {
  constructor(data?: PartialMessage<BurnAssertionClaimFormat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.BurnAssertionClaimFormat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BurnAssertionClaimFormat {
    return new BurnAssertionClaimFormat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BurnAssertionClaimFormat {
    return new BurnAssertionClaimFormat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BurnAssertionClaimFormat {
    return new BurnAssertionClaimFormat().fromJsonString(jsonString, options);
  }

  static equals(a: BurnAssertionClaimFormat | PlainMessage<BurnAssertionClaimFormat> | undefined, b: BurnAssertionClaimFormat | PlainMessage<BurnAssertionClaimFormat> | undefined): boolean {
    return proto3.util.equals(BurnAssertionClaimFormat, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.AssignmentAssertionClaim
 */
export class AssignmentAssertionClaim extends Message<AssignmentAssertionClaim> {
  constructor(data?: PartialMessage<AssignmentAssertionClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.AssignmentAssertionClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignmentAssertionClaim {
    return new AssignmentAssertionClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignmentAssertionClaim {
    return new AssignmentAssertionClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignmentAssertionClaim {
    return new AssignmentAssertionClaim().fromJsonString(jsonString, options);
  }

  static equals(a: AssignmentAssertionClaim | PlainMessage<AssignmentAssertionClaim> | undefined, b: AssignmentAssertionClaim | PlainMessage<AssignmentAssertionClaim> | undefined): boolean {
    return proto3.util.equals(AssignmentAssertionClaim, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.AssignmentAssertionClaimFormat
 */
export class AssignmentAssertionClaimFormat extends Message<AssignmentAssertionClaimFormat> {
  constructor(data?: PartialMessage<AssignmentAssertionClaimFormat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.AssignmentAssertionClaimFormat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignmentAssertionClaimFormat {
    return new AssignmentAssertionClaimFormat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignmentAssertionClaimFormat {
    return new AssignmentAssertionClaimFormat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignmentAssertionClaimFormat {
    return new AssignmentAssertionClaimFormat().fromJsonString(jsonString, options);
  }

  static equals(a: AssignmentAssertionClaimFormat | PlainMessage<AssignmentAssertionClaimFormat> | undefined, b: AssignmentAssertionClaimFormat | PlainMessage<AssignmentAssertionClaimFormat> | undefined): boolean {
    return proto3.util.equals(AssignmentAssertionClaimFormat, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.CommitPreparationRequest
 */
export class CommitPreparationRequest extends Message<CommitPreparationRequest> {
  /**
   * @generated from field: cacti.satp.v02.common.SATPMessage satp_message = 1;
   */
  satpMessage?: SATPMessage;

  /**
   * @generated from field: string client_transfer_number = 2;
   */
  clientTransferNumber = "";

  /**
   * @generated from field: string client_signature = 3;
   */
  clientSignature = "";

  constructor(data?: PartialMessage<CommitPreparationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.CommitPreparationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satp_message", kind: "message", T: SATPMessage },
    { no: 2, name: "client_transfer_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitPreparationRequest {
    return new CommitPreparationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitPreparationRequest {
    return new CommitPreparationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitPreparationRequest {
    return new CommitPreparationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CommitPreparationRequest | PlainMessage<CommitPreparationRequest> | undefined, b: CommitPreparationRequest | PlainMessage<CommitPreparationRequest> | undefined): boolean {
    return proto3.util.equals(CommitPreparationRequest, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.CommitReadyResponse
 */
export class CommitReadyResponse extends Message<CommitReadyResponse> {
  /**
   * @generated from field: cacti.satp.v02.common.SATPMessage satp_message = 1;
   */
  satpMessage?: SATPMessage;

  /**
   * @generated from field: cacti.satp.v02.MintAssertionClaims mint_assertion_claims = 2;
   */
  mintAssertionClaims?: MintAssertionClaims;

  /**
   * @generated from field: string server_transfer_number = 3;
   */
  serverTransferNumber = "";

  /**
   * @generated from field: string server_signature = 4;
   */
  serverSignature = "";

  constructor(data?: PartialMessage<CommitReadyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.CommitReadyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satp_message", kind: "message", T: SATPMessage },
    { no: 2, name: "mint_assertion_claims", kind: "message", T: MintAssertionClaims },
    { no: 3, name: "server_transfer_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "server_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitReadyResponse {
    return new CommitReadyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitReadyResponse {
    return new CommitReadyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitReadyResponse {
    return new CommitReadyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CommitReadyResponse | PlainMessage<CommitReadyResponse> | undefined, b: CommitReadyResponse | PlainMessage<CommitReadyResponse> | undefined): boolean {
    return proto3.util.equals(CommitReadyResponse, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.CommitFinalAssertionRequest
 */
export class CommitFinalAssertionRequest extends Message<CommitFinalAssertionRequest> {
  /**
   * @generated from field: cacti.satp.v02.common.SATPMessage satp_message = 1;
   */
  satpMessage?: SATPMessage;

  /**
   * @generated from field: cacti.satp.v02.BurnAssertionClaim burn_assertion_claim = 2;
   */
  burnAssertionClaim?: BurnAssertionClaim;

  /**
   * @generated from field: cacti.satp.v02.BurnAssertionClaimFormat burn_assertion_claim_format = 3;
   */
  burnAssertionClaimFormat?: BurnAssertionClaimFormat;

  /**
   * @generated from field: string client_transfer_number = 4;
   */
  clientTransferNumber = "";

  /**
   * @generated from field: string client_signature = 5;
   */
  clientSignature = "";

  constructor(data?: PartialMessage<CommitFinalAssertionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.CommitFinalAssertionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satp_message", kind: "message", T: SATPMessage },
    { no: 2, name: "burn_assertion_claim", kind: "message", T: BurnAssertionClaim },
    { no: 3, name: "burn_assertion_claim_format", kind: "message", T: BurnAssertionClaimFormat },
    { no: 4, name: "client_transfer_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "client_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitFinalAssertionRequest {
    return new CommitFinalAssertionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitFinalAssertionRequest {
    return new CommitFinalAssertionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitFinalAssertionRequest {
    return new CommitFinalAssertionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CommitFinalAssertionRequest | PlainMessage<CommitFinalAssertionRequest> | undefined, b: CommitFinalAssertionRequest | PlainMessage<CommitFinalAssertionRequest> | undefined): boolean {
    return proto3.util.equals(CommitFinalAssertionRequest, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.CommitFinalAcknowledgementReceiptResponse
 */
export class CommitFinalAcknowledgementReceiptResponse extends Message<CommitFinalAcknowledgementReceiptResponse> {
  /**
   * @generated from field: cacti.satp.v02.common.SATPMessage satp_message = 1;
   */
  satpMessage?: SATPMessage;

  /**
   * @generated from field: cacti.satp.v02.AssignmentAssertionClaim assignment_assertion_claim = 2;
   */
  assignmentAssertionClaim?: AssignmentAssertionClaim;

  /**
   * @generated from field: cacti.satp.v02.AssignmentAssertionClaimFormat assignment_assertion_claim_format = 3;
   */
  assignmentAssertionClaimFormat?: AssignmentAssertionClaimFormat;

  /**
   * @generated from field: string server_transfer_number = 4;
   */
  serverTransferNumber = "";

  /**
   * @generated from field: string server_signature = 5;
   */
  serverSignature = "";

  constructor(data?: PartialMessage<CommitFinalAcknowledgementReceiptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.CommitFinalAcknowledgementReceiptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satp_message", kind: "message", T: SATPMessage },
    { no: 2, name: "assignment_assertion_claim", kind: "message", T: AssignmentAssertionClaim },
    { no: 3, name: "assignment_assertion_claim_format", kind: "message", T: AssignmentAssertionClaimFormat },
    { no: 4, name: "server_transfer_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "server_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitFinalAcknowledgementReceiptResponse {
    return new CommitFinalAcknowledgementReceiptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitFinalAcknowledgementReceiptResponse {
    return new CommitFinalAcknowledgementReceiptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitFinalAcknowledgementReceiptResponse {
    return new CommitFinalAcknowledgementReceiptResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CommitFinalAcknowledgementReceiptResponse | PlainMessage<CommitFinalAcknowledgementReceiptResponse> | undefined, b: CommitFinalAcknowledgementReceiptResponse | PlainMessage<CommitFinalAcknowledgementReceiptResponse> | undefined): boolean {
    return proto3.util.equals(CommitFinalAcknowledgementReceiptResponse, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.TransferCompleteRequest
 */
export class TransferCompleteRequest extends Message<TransferCompleteRequest> {
  /**
   * @generated from field: cacti.satp.v02.common.SATPMessage satp_message = 1;
   */
  satpMessage?: SATPMessage;

  /**
   * @generated from field: string hash_transfer_commence = 2;
   */
  hashTransferCommence = "";

  /**
   * @generated from field: string client_transfer_number = 3;
   */
  clientTransferNumber = "";

  /**
   * @generated from field: string client_signature = 4;
   */
  clientSignature = "";

  constructor(data?: PartialMessage<TransferCompleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.TransferCompleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satp_message", kind: "message", T: SATPMessage },
    { no: 2, name: "hash_transfer_commence", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_transfer_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "client_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferCompleteRequest {
    return new TransferCompleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferCompleteRequest {
    return new TransferCompleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferCompleteRequest {
    return new TransferCompleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TransferCompleteRequest | PlainMessage<TransferCompleteRequest> | undefined, b: TransferCompleteRequest | PlainMessage<TransferCompleteRequest> | undefined): boolean {
    return proto3.util.equals(TransferCompleteRequest, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.TransferCompleteResponse
 */
export class TransferCompleteResponse extends Message<TransferCompleteResponse> {
  constructor(data?: PartialMessage<TransferCompleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.TransferCompleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferCompleteResponse {
    return new TransferCompleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferCompleteResponse {
    return new TransferCompleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferCompleteResponse {
    return new TransferCompleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TransferCompleteResponse | PlainMessage<TransferCompleteResponse> | undefined, b: TransferCompleteResponse | PlainMessage<TransferCompleteResponse> | undefined): boolean {
    return proto3.util.equals(TransferCompleteResponse, a, b);
  }
}

