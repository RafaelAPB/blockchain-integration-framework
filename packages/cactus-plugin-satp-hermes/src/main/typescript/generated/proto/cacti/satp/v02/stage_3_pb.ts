// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file cacti/satp/v02/stage_3.proto (package cacti.satp.v02, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SATPMessage } from "./common/common_messages_pb.js";

/**
 * @generated from message cacti.satp.v02.MintAssertionClaims
 */
export class MintAssertionClaims extends Message<MintAssertionClaims> {
  constructor(data?: PartialMessage<MintAssertionClaims>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.MintAssertionClaims";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MintAssertionClaims {
    return new MintAssertionClaims().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MintAssertionClaims {
    return new MintAssertionClaims().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MintAssertionClaims {
    return new MintAssertionClaims().fromJsonString(jsonString, options);
  }

  static equals(a: MintAssertionClaims | PlainMessage<MintAssertionClaims> | undefined, b: MintAssertionClaims | PlainMessage<MintAssertionClaims> | undefined): boolean {
    return proto3.util.equals(MintAssertionClaims, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.BurnAssertionClaim
 */
export class BurnAssertionClaim extends Message<BurnAssertionClaim> {
  constructor(data?: PartialMessage<BurnAssertionClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.BurnAssertionClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BurnAssertionClaim {
    return new BurnAssertionClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BurnAssertionClaim {
    return new BurnAssertionClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BurnAssertionClaim {
    return new BurnAssertionClaim().fromJsonString(jsonString, options);
  }

  static equals(a: BurnAssertionClaim | PlainMessage<BurnAssertionClaim> | undefined, b: BurnAssertionClaim | PlainMessage<BurnAssertionClaim> | undefined): boolean {
    return proto3.util.equals(BurnAssertionClaim, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.BurnAssertionClaimFormat
 */
export class BurnAssertionClaimFormat extends Message<BurnAssertionClaimFormat> {
  constructor(data?: PartialMessage<BurnAssertionClaimFormat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.BurnAssertionClaimFormat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BurnAssertionClaimFormat {
    return new BurnAssertionClaimFormat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BurnAssertionClaimFormat {
    return new BurnAssertionClaimFormat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BurnAssertionClaimFormat {
    return new BurnAssertionClaimFormat().fromJsonString(jsonString, options);
  }

  static equals(a: BurnAssertionClaimFormat | PlainMessage<BurnAssertionClaimFormat> | undefined, b: BurnAssertionClaimFormat | PlainMessage<BurnAssertionClaimFormat> | undefined): boolean {
    return proto3.util.equals(BurnAssertionClaimFormat, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.AssignmentAssertionClaim
 */
export class AssignmentAssertionClaim extends Message<AssignmentAssertionClaim> {
  constructor(data?: PartialMessage<AssignmentAssertionClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.AssignmentAssertionClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignmentAssertionClaim {
    return new AssignmentAssertionClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignmentAssertionClaim {
    return new AssignmentAssertionClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignmentAssertionClaim {
    return new AssignmentAssertionClaim().fromJsonString(jsonString, options);
  }

  static equals(a: AssignmentAssertionClaim | PlainMessage<AssignmentAssertionClaim> | undefined, b: AssignmentAssertionClaim | PlainMessage<AssignmentAssertionClaim> | undefined): boolean {
    return proto3.util.equals(AssignmentAssertionClaim, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.AssignmentAssertionClaimFormat
 */
export class AssignmentAssertionClaimFormat extends Message<AssignmentAssertionClaimFormat> {
  constructor(data?: PartialMessage<AssignmentAssertionClaimFormat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.AssignmentAssertionClaimFormat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignmentAssertionClaimFormat {
    return new AssignmentAssertionClaimFormat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignmentAssertionClaimFormat {
    return new AssignmentAssertionClaimFormat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignmentAssertionClaimFormat {
    return new AssignmentAssertionClaimFormat().fromJsonString(jsonString, options);
  }

  static equals(a: AssignmentAssertionClaimFormat | PlainMessage<AssignmentAssertionClaimFormat> | undefined, b: AssignmentAssertionClaimFormat | PlainMessage<AssignmentAssertionClaimFormat> | undefined): boolean {
    return proto3.util.equals(AssignmentAssertionClaimFormat, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.CommitPreparationMessage
 */
export class CommitPreparationMessage extends Message<CommitPreparationMessage> {
  /**
   * @generated from field: cacti.satp.v02.common.SATPMessage satp_message = 1;
   */
  satpMessage?: SATPMessage;

  /**
   * @generated from field: string client_transfer_number = 2;
   */
  clientTransferNumber = "";

  /**
   * @generated from field: string client_signature = 3;
   */
  clientSignature = "";

  constructor(data?: PartialMessage<CommitPreparationMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.CommitPreparationMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satp_message", kind: "message", T: SATPMessage },
    { no: 2, name: "client_transfer_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitPreparationMessage {
    return new CommitPreparationMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitPreparationMessage {
    return new CommitPreparationMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitPreparationMessage {
    return new CommitPreparationMessage().fromJsonString(jsonString, options);
  }

  static equals(a: CommitPreparationMessage | PlainMessage<CommitPreparationMessage> | undefined, b: CommitPreparationMessage | PlainMessage<CommitPreparationMessage> | undefined): boolean {
    return proto3.util.equals(CommitPreparationMessage, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.CommitReadyMessage
 */
export class CommitReadyMessage extends Message<CommitReadyMessage> {
  /**
   * @generated from field: cacti.satp.v02.common.SATPMessage satp_message = 1;
   */
  satpMessage?: SATPMessage;

  /**
   * @generated from field: cacti.satp.v02.MintAssertionClaims mint_assertion_claims = 2;
   */
  mintAssertionClaims?: MintAssertionClaims;

  /**
   * @generated from field: string server_transfer_number = 3;
   */
  serverTransferNumber = "";

  /**
   * @generated from field: string server_signature = 4;
   */
  serverSignature = "";

  constructor(data?: PartialMessage<CommitReadyMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.CommitReadyMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satp_message", kind: "message", T: SATPMessage },
    { no: 2, name: "mint_assertion_claims", kind: "message", T: MintAssertionClaims },
    { no: 3, name: "server_transfer_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "server_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitReadyMessage {
    return new CommitReadyMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitReadyMessage {
    return new CommitReadyMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitReadyMessage {
    return new CommitReadyMessage().fromJsonString(jsonString, options);
  }

  static equals(a: CommitReadyMessage | PlainMessage<CommitReadyMessage> | undefined, b: CommitReadyMessage | PlainMessage<CommitReadyMessage> | undefined): boolean {
    return proto3.util.equals(CommitReadyMessage, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.CommitFinalAssertionMessage
 */
export class CommitFinalAssertionMessage extends Message<CommitFinalAssertionMessage> {
  /**
   * @generated from field: cacti.satp.v02.common.SATPMessage satp_message = 1;
   */
  satpMessage?: SATPMessage;

  /**
   * @generated from field: cacti.satp.v02.BurnAssertionClaim burn_assertion_claim = 2;
   */
  burnAssertionClaim?: BurnAssertionClaim;

  /**
   * @generated from field: cacti.satp.v02.BurnAssertionClaimFormat burn_assertion_claim_format = 3;
   */
  burnAssertionClaimFormat?: BurnAssertionClaimFormat;

  /**
   * @generated from field: string client_transfer_number = 4;
   */
  clientTransferNumber = "";

  /**
   * @generated from field: string client_signature = 5;
   */
  clientSignature = "";

  constructor(data?: PartialMessage<CommitFinalAssertionMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.CommitFinalAssertionMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satp_message", kind: "message", T: SATPMessage },
    { no: 2, name: "burn_assertion_claim", kind: "message", T: BurnAssertionClaim },
    { no: 3, name: "burn_assertion_claim_format", kind: "message", T: BurnAssertionClaimFormat },
    { no: 4, name: "client_transfer_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "client_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitFinalAssertionMessage {
    return new CommitFinalAssertionMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitFinalAssertionMessage {
    return new CommitFinalAssertionMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitFinalAssertionMessage {
    return new CommitFinalAssertionMessage().fromJsonString(jsonString, options);
  }

  static equals(a: CommitFinalAssertionMessage | PlainMessage<CommitFinalAssertionMessage> | undefined, b: CommitFinalAssertionMessage | PlainMessage<CommitFinalAssertionMessage> | undefined): boolean {
    return proto3.util.equals(CommitFinalAssertionMessage, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.CommitFinalAcknowledgementReceiptMessage
 */
export class CommitFinalAcknowledgementReceiptMessage extends Message<CommitFinalAcknowledgementReceiptMessage> {
  /**
   * @generated from field: cacti.satp.v02.common.SATPMessage satp_message = 1;
   */
  satpMessage?: SATPMessage;

  /**
   * @generated from field: cacti.satp.v02.AssignmentAssertionClaim assignment_assertion_claim = 2;
   */
  assignmentAssertionClaim?: AssignmentAssertionClaim;

  /**
   * @generated from field: cacti.satp.v02.AssignmentAssertionClaimFormat assignment_assertion_claim_format = 3;
   */
  assignmentAssertionClaimFormat?: AssignmentAssertionClaimFormat;

  /**
   * @generated from field: string server_transfer_number = 4;
   */
  serverTransferNumber = "";

  /**
   * @generated from field: string server_signature = 5;
   */
  serverSignature = "";

  constructor(data?: PartialMessage<CommitFinalAcknowledgementReceiptMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.CommitFinalAcknowledgementReceiptMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satp_message", kind: "message", T: SATPMessage },
    { no: 2, name: "assignment_assertion_claim", kind: "message", T: AssignmentAssertionClaim },
    { no: 3, name: "assignment_assertion_claim_format", kind: "message", T: AssignmentAssertionClaimFormat },
    { no: 4, name: "server_transfer_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "server_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitFinalAcknowledgementReceiptMessage {
    return new CommitFinalAcknowledgementReceiptMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitFinalAcknowledgementReceiptMessage {
    return new CommitFinalAcknowledgementReceiptMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitFinalAcknowledgementReceiptMessage {
    return new CommitFinalAcknowledgementReceiptMessage().fromJsonString(jsonString, options);
  }

  static equals(a: CommitFinalAcknowledgementReceiptMessage | PlainMessage<CommitFinalAcknowledgementReceiptMessage> | undefined, b: CommitFinalAcknowledgementReceiptMessage | PlainMessage<CommitFinalAcknowledgementReceiptMessage> | undefined): boolean {
    return proto3.util.equals(CommitFinalAcknowledgementReceiptMessage, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.TransferCompleteMessage
 */
export class TransferCompleteMessage extends Message<TransferCompleteMessage> {
  /**
   * @generated from field: cacti.satp.v02.common.SATPMessage satp_message = 1;
   */
  satpMessage?: SATPMessage;

  /**
   * @generated from field: string hash_transfer_commence = 2;
   */
  hashTransferCommence = "";

  /**
   * @generated from field: string client_transfer_number = 3;
   */
  clientTransferNumber = "";

  /**
   * @generated from field: string client_signature = 4;
   */
  clientSignature = "";

  constructor(data?: PartialMessage<TransferCompleteMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.TransferCompleteMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satp_message", kind: "message", T: SATPMessage },
    { no: 2, name: "hash_transfer_commence", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_transfer_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "client_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferCompleteMessage {
    return new TransferCompleteMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferCompleteMessage {
    return new TransferCompleteMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferCompleteMessage {
    return new TransferCompleteMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TransferCompleteMessage | PlainMessage<TransferCompleteMessage> | undefined, b: TransferCompleteMessage | PlainMessage<TransferCompleteMessage> | undefined): boolean {
    return proto3.util.equals(TransferCompleteMessage, a, b);
  }
}

