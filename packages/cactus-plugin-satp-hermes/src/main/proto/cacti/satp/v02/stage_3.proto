
syntax = "proto3";
package cacti.satp.v02;

import "cacti/satp/v02/common/common_messages.proto";

message MintAssertionClaims {

}

message BurnAssertionClaim {

}

message BurnAssertionClaimFormat {

}

message AssignmentAssertionClaim {

}

message AssignmentAssertionClaimFormat {

}

message CommitPreparationRequest {
  cacti.satp.v02.common.CommonSatp common = 1;
  string client_transfer_number = 2;
  string client_signature = 3;
}

message CommitReadyResponse {
  cacti.satp.v02.common.CommonSatp common = 1;
  MintAssertionClaims mint_assertion_claims = 2;
  string server_transfer_number = 3;
  string server_signature = 4;
}

message CommitFinalAssertionRequest {
  cacti.satp.v02.common.CommonSatp common = 1;
  BurnAssertionClaim burn_assertion_claim = 2;
  BurnAssertionClaimFormat burn_assertion_claim_format = 3;
  string client_transfer_number = 4;
  string client_signature = 5;

}

message CommitFinalAcknowledgementReceiptResponse {
  cacti.satp.v02.common.CommonSatp common = 1;
  AssignmentAssertionClaim assignment_assertion_claim = 2;
  AssignmentAssertionClaimFormat assignment_assertion_claim_format = 3;
  string server_transfer_number = 4;
  string server_signature = 5;
}

message TransferCompleteRequest {
  cacti.satp.v02.common.CommonSatp common = 1;
  string hash_transfer_commence = 2;
  string client_transfer_number = 3;
  string client_signature = 4;
}

message TransferCompleteResponse {

}
  
service SatpStage3Service {
  // util RPCs

  // step RPCs
  rpc CommitPreparation(CommitPreparationRequest) returns (CommitReadyResponse) {}
  rpc CommitFinalAssertion(CommitFinalAssertionRequest) returns (CommitFinalAcknowledgementReceiptResponse) {}
  rpc TransferComplete(TransferCompleteRequest) returns (TransferCompleteResponse) {}

}
